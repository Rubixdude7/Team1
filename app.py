import os

import sqlalchemy.exc
import babel
import pytz
from flask import Flask, render_template, request, redirect, url_for, Markup, jsonify, json, current_app
import datetime
from flask_sqlalchemy import SQLAlchemy
from playhouse.flask_utils import object_list
from flask import request
from flask_user import login_required, roles_required, UserManager, UserMixin, SQLAlchemyAdapter, current_user
from flask_user import login_required, roles_required, UserManager, UserMixin, SQLAlchemyAdapter, current_user, \
    user_registered, emails
from flask_user.forms import RegisterForm
from flask_mail import Mail
from flask_wtf import FlaskForm
from wtforms import StringField, DateTimeField, Form, SelectField, SubmitField, RadioField
from wtforms.validators import DataRequired
from flask import redirect, url_for
from werkzeug.utils import secure_filename
from wtforms import StringField, DateField
from wtforms.validators import DataRequired, ValidationError
import query
import models
import math
from flask import flash, render_template, request, redirect
from jose import jwt
import urllib.request
import urllib.parse
from _sha256 import sha256
from uuid import uuid4 #this is in place of js's guid
import requests

app = Flask(__name__)
app.config['SECRET_KEY'] = 'thisisasecret'
# DEV Jason's database
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://mgqmsvhuvgtovyte:Aqyg6kb6tqDJjNvvoJEDGqJv8xTytGnRm8L28MPrnQjztPMk3xupApKjNchFyKKU@42576e98-688b-4ab2-8226-a87601334c89.mysql.sequelizer.com/db42576e98688b4ab28226a87601334c89'
# DEV sqlite (local)
#app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///local.db'
# Production Brandon's databasee
#app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://bgrwfoetjnrliplh:GRShWRVNEtekUUFPP647rgrHZSjGghQFxWjv8uMuAax4C8aL8bUxQC8AyipdFoGw@9a6e80b2-e34b-41f3-bd8d-a871003e804d.mysql.sequelizer.com/db9a6e80b2e34b41f3bd8da871003e804d'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # TODO make sure this is ok, this gets rid of the warning in the terminal
app.config['CSRF_ENABLED'] = True
app.config['USER_APP_NAME'] = 'Passion'
app.config['USER_AFTER_REGISTER_ENDPOINT'] = 'user.login'
app.config.from_pyfile('config.cfg')

# Setup Flask-User

db = SQLAlchemy(app)
mail = Mail(app)


class User(db.Model, UserMixin):
    id = db.Column('user_id', db.BigInteger, primary_key=True)

    # User authentication information
    username = db.Column(db.String(50), nullable=False, unique=True)
    password = db.Column(db.String(255), nullable=False, server_default='')

    # User email information
    email = db.Column(db.String(255), nullable=False, unique=True)
    confirmed_at = db.Column(db.DateTime())

    # User information
    active = db.Column(db.Boolean(), nullable=False, server_default='0')
    first_name = db.Column(db.String(100), nullable=False, server_default='')
    last_name = db.Column(db.String(100), nullable=True, server_default='')

    # Relationships
    roles = db.relationship('Role', secondary='user_roles',
                            backref=db.backref('users', lazy='dynamic'))

    def is_active(self):
        return self.active

    def is_in_role(self, r):
        role_nm = db.session.query(Role.name).join(UserRoles, (Role.id == UserRoles.role_id) & (
                    UserRoles.user_id == self.id)).all()
        rs = False
        for rn in role_nm:
            if r == rn[0]:
                rs = True
        return rs


# Define the Role data model
class Role(db.Model):
    id = db.Column('role_id', db.BigInteger(), primary_key=True)
    name = db.Column('role_nm', db.String(50), unique=True)


# Define the UserRoles data model
class UserRoles(db.Model):
    id = db.Column('user_role_id', db.BigInteger(), primary_key=True)
    user_id = db.Column(db.Integer(), db.ForeignKey('user.user_id', ondelete='CASCADE'))
    role_id = db.Column(db.Integer(), db.ForeignKey('role.role_id', ondelete='CASCADE'))


class MyRegisterForm(RegisterForm):
    first_name = StringField('First Name', validators=[DataRequired('First name is required')])
    last_name = StringField('Last Name')


# Setup Flask-User
db_adapter = SQLAlchemyAdapter(db, UserClass=User)  # Register the User model
user_manager = UserManager(db_adapter, app, register_form=MyRegisterForm)  # Initialize Flask-User

# set up query class as db
querydb = query.query()


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    if models.db.is_closed():
        models.db.connect()
        models.create_tables_and_seed_if_necessary()

# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not models.db.is_closed():
        models.db.close()


# This hook ensures that a user is given a role when they sign up
# new user registered
@user_registered.connect_via(app)
def _after_register_hook(sender, user, **extra):
    role = Role.query.filter_by(name="user").first()
    user_role = UserRoles(user_id=user.id, role_id=role.id)
    db.session.add(user_role)
    db.session.commit()


#           BRANDON         #


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


@app.errorhandler(403)
def page_not_found(e):
    return render_template('403.html'), 403


@app.errorhandler(410)
def page_not_found(e):
    return render_template('410.html'), 410


@app.errorhandler(500)
def page_not_found(e):
    return render_template('500.html'), 500


@app.errorhandler(sqlalchemy.exc.OperationalError)
def handle_bad_request(e):
    flash("TELL BRANDON!!! HE IS TRYING TO SEE IF THIS FIXES THE ERROR THAT HE CAUGHT!!! "
          "SOME BACKGROUND, THIS HAPPENS BECAUSE OF AN ERROR WITH OUT DB TIMING OUT"
          "THE FIX IS TO REFRESH THE PAGE AND IN THE FUTURE THAT IS WHAT WILL HAPPEND"
          "BUT FOR NOW WE NEED TO SEND YOU HOME TO SEE IF THE ERROR IS EVEN BEING CAUGHT"
          "SO TELL BRANDON!!!!!")
    args = request.args.to_dict()

    # Scopes will be passed as mutliple args, and to_dict() will only
    # return one. So, we use getlist() to get all of the scopes.
    args['scopes'] = request.args.getlist('scopes')
    return_url = args.pop('return_url', None)
    if return_url is None:
        return_url = request.referrer or '/'
    return redirect(return_url)


@app.route('/')
def index():
    page_num = 1
    if 'page_num' in request.args:
        page_num = int(request.args['page_num'])
    return render_template("index.html", blog_posts=querydb.getAllBlogPosts(page_num, 10), page_num=page_num)


@app.route('/consultation', methods=['GET', 'POST'])
@login_required
def consultation():
    req = {
        'child_id': request.json['child_id'],
        'psyc_id': request.json['psyc_id'],
        'len': request.json['len'],
        'st_dt': request.json['st_dt']
    }

    status = querydb.schecule_cnslt(req)

    email = status[2], status[3], status[4], status[5], status[6]

    if email is not None:
        emails.send_email(email[0].email, render_template('flask_user/emails/consultation_booked_subject.txt'),
                          render_template('flask_user/emails/consultation_booked_message.html', user=email[0],
                                          child_name=email[1], appt_st_tm=email[2], appt_len=email[3], cnslt_total=email[4],
                                          app_name=current_app.user_manager.app_name),
                          render_template('flask_user/emails/consultation_booked_message.txt', user=email[0],
                                          child_name=email[1], appt_st_tm=email[2], appt_len=email[3], cnslt_total=email[4],
                                          app_name=current_app.user_manager.app_name))

    return jsonify({'status': status[0], 'message': status[1]})


@app.route('/notification', methods=['POST'])
@login_required
def notification():

    notifs = querydb.getNotification(current_user.id)

    return jsonify({'notifs': notifs})


#           END BRANDON         #

#    Begin Jared
@app.route('/editQuestion', methods=['GET', 'POST'])
def editQuestion():
    q_id = request.args.get('q_id')
    getQuestion = querydb.getQuestion(q_id)
    form = QuestionEdit(request.form)
    if form.validate_on_submit():
        newQuestion = form.question.data
        querydb.editQuestion(q_id, newQuestion)
        flash('Your changes have been saved.')
        return redirect(url_for('questions'))
    return render_template('editQuestion.html', title='Edit Question',
                           form=form, question=getQuestion)


@app.route('/questiondeactivate')
def questiondeactivate():
    q_id = request.args.get('q_id')
    querydb.deactivateQuestion(q_id)
    flash('Your blog post has been deactivated!')
    return redirect(url_for('questions'))


@app.route('/questionreactivate')
def questionreactivate():
    q_id = request.args.get('q_id')
    querydb.reactivateQuestion(q_id)
    flash('Your blog post has been reactivated!')
    return redirect(url_for('questions'))


@app.route('/questionDelete')
def questionDelete():
    q_id = request.args.get('q_id')
    querydb.questionDelete(q_id)
    flash('Question has been deleted!')
    return redirect(url_for('questions'))


@app.route('/questions/')
@login_required
def questions():  # TODO Breaks if there are no quesions in db
    questions = querydb.getAllQuestions()
    if not questions:

        return render_template("questions.html", questions=questions)


    return object_list("questions.html", paginate_by=3, query=questions, context_variable='questions')


@app.route('/reviews')
@login_required
def reviews():  # TODO Breaks if there are no quesions in db
    return render_template("reviews.html")

@app.route('/review_approve')
def reviewapprove():
    r_id = request.args.get('r_id')
    querydb.approveReview(r_id)
    flash('You approved this review!')
    return redirect(url_for('approve_reviews'))
@app.route('/review_deny', methods=['GET', 'POST'])
def reviewdeny():

    rev_id = request.args.get('rev_id')
    email = request.args.get('email')
    reason = Markup(request.form.get('reason'))
    print(reason)
    if email is not None:
        emails.send_email(email, render_template('flask_user/emails/review_denied_subject.txt'),
                          render_template('flask_user/emails/review_denied_message.html',
                                          app_name=current_app.user_manager.app_name, reason=reason),
                          render_template('flask_user/emails/review_denied_message.txt',
                                          app_name=current_app.user_manager.app_name, reason=reason))



    querydb.denyReview(rev_id)




    flash('You denied this review!')
    return redirect(url_for('approve_reviews'))


@app.route('/questionsUserView/', methods=['GET', 'POST'])
@login_required
def questionsUserView():
    totalQuestions = request.args.get('totalQuestions')
    child_id = request.args.get('child_id')
    child_name = request.args.get('child_name')

    c = querydb.findChild(child_id)
    checkComplete = c.q_comp_dtm
    # brody
    if c is None:
        return redirect(url_for('parent'))
    elif c.user.user_id != current_user.id:
        return redirect(url_for('parent'))
    page = request.args.get("page")
    if page is not None:
        page = int(page)
        if page >= 1:
            savePaginateAnswers()
    # end brody

    questions = querydb.getAllQuestionsForUsers()
    # Brody code
    answers = []

    for q in questions:
        print(q)
        answers.append(querydb.getAnswer(q.q_id, child_id))
    # end Brody code
    if totalQuestions is None:
        totalQuestions = len(questions)  # for progress bar
        totalQuestions = int(totalQuestions)
    if not questions:

        return render_template("questionsUserView.html", questions=questions)

    return object_list("questionsUserView.html", paginate_by=3, query=questions, context_variable='questions',
                       child_id=child_id, child_name=child_name, answers=answers, totalQuestions=totalQuestions,
                       checkComplete=checkComplete)


@app.route('/questionsUserView2/', methods=['GET', 'POST'])
@login_required
def questionsUserView2():  # post QuestionUserView
    # getargs
    totalQuestions = request.args.get('totalQuestions')
    totalQuestions = int(totalQuestions)
    page = request.args.get('page')
    totalPage = request.args.get('totalPage')
    child_id = request.args.get('child_id')
    child_name = request.args.get('child_name')

    # validation
    c = querydb.findChild(child_id)
    checkComplete = c.q_comp_dtm
    if c is None:
        return redirect(url_for('parent'))
    elif c.user.user_id != current_user.id:
        return redirect(url_for('parent'))

    # how much each page should paginate by, change for differet number of questions per page(please change this value for other question views if you change)
    paginate = 3
    questions = querydb.getAllQuestionsForUsers()
    # Brody code
    answers = []
    for q in questions:
        answers.append(querydb.getAnswer(q.q_id, child_id))
    if page is not None:
        answers = answers[(paginate * (int(page) - 1)): len(answers)]
    # End Brody code

    questionAnswerList = request.form.getlist('fname')
    print(questionAnswerList)
    questionIdList = request.form.getlist('qField')
    childId = request.form.get('cField')
    print(questionIdList)
    # Brody says: q = answer, q2 = questionId
    for (q, q2) in zip(questionAnswerList, questionIdList):
        # lack of this if was causing false "completed" question forms
        if q is not '':
            querydb.addQuestionAnswers(q, current_user.id, q2, childId)
    if page == totalPage:
        querydb.checkComp(child_id)
        return redirect(url_for('parent'))

    return object_list("questionsUserView.html", paginate_by=paginate, query=questions, context_variable='questions',
                       child_id=child_id, child_name=child_name, answers=answers, totalQuestions=totalQuestions,
                       checkComplete=checkComplete)


@app.route('/viewAnswers/')
@login_required
def viewAnswers():
    child_id = request.args.get('child_id')
    child_name = request.args.get('child_name')
    questions = querydb.getAllQuestionAnswers()
    #  count = querydb.paginate(page_num) --still working on pagination
    return object_list("questionsUserView.html", paginate_by=3, query=questions, context_variable='questions',
                       child_id=child_id, child_name=child_name)


@app.route('/parent_seeanswers')
@login_required
def parent_seeanswers():
    child_id = request.args.get('child_id')
    c = querydb.findChild(child_id)
    if c is None:
        return redirect(url_for('parent'))
    elif current_user.id is not c.user.user_id:
        return redirect(url_for('parent'))
    questions = querydb.getAllQuestionsForUsers()
    # Brody code
    answers = []
    for q in questions:
        print("Q_ID: ", q.q_id)
        answers.append(querydb.getAnswer(q.q_id, child_id))
    # end Brody code
    return render_template("parent_seeanswers.html", child_id=child_id, answers=answers, questions=questions)
@app.route('/approve_reviews')
@login_required
def approve_reviews():
    reviews = querydb.getAllUnapprovedReviews()
    reviews2 = querydb.getAllApprovedReviews()
    return render_template("admin/approve_reviews.html", reviews=reviews, reviews2= reviews2)
@app.route('/denied_review')
@login_required
def denied_review():
    user = request.args.get('user')
    rev_id = request.args.get('rev_id')
    email = request.args.get('email')
    return render_template("admin/denied_review.html", rev_id=rev_id, user=user, email=email)

@app.route('/add_questions')
@login_required
def add_questions():
    return render_template("admin/approve_reviews.html")


@app.route('/post_add_questions', methods=['GET', 'POST'])
def post_questions():
    question = request.form.get('question')
    print(question)
    print(current_user.id)
    querydb.addQuestion(question, current_user.id)

    return redirect(url_for('questions'))


@app.route('/post_edit_questionAnswers', methods=['GET', 'POST'])
def post_editQuestions():
    questionAnswerList = request.form.getlist('fname')
    questionIdList = request.form.getlist('qField')
    childId = request.form.get('cField')

    for (q, q2) in zip(questionAnswerList, questionIdList):
        print(current_user.id)
        print(questionAnswerList)
        querydb.addQuestionAnswers(q, current_user.id, q2, childId)

    return redirect(url_for('parent'))



#   End Jared

# Start Gabe
@app.route('/parent')
@login_required
@roles_required('user')
def parent():
    updatedQuestions = querydb.checkNewQuestions(current_user.id)
    return render_template('parent.html', user=current_user.first_name + " " + current_user.last_name,
                           children=querydb.getChildren(current_user.id),
                           contact_info=querydb.contactID(current_user.id), querydb=querydb,
                           updatedQuestions=updatedQuestions)


@app.route('/parent/contact')
@roles_required('user')
def contact():
    return render_template('contact.html', contact_info=querydb.contactID(current_user.id))


@app.route('/parent/contact', methods=['GET', 'POST'])
@roles_required('user')
def editContact():
    contact_id = querydb.contactID(current_user.id)
    querydb.updateContact(current_user.id, contact_id, request.form.get('phone_no'), request.form.get('address_1'),
                          request.form.get('address_2'), request.form.get('city'), request.form.get('providence'),
                          request.form.get('zip'))
    return parent()


@app.route('/videoConf')
#@login_required
#@roles_required('user', 'psyc')
def videoConf():
    url = 'https://interviews.skype.com/api/interviews'

    payload = {
        "capabilities": {
            "codeEditor": False,
            "notes": True
        }
    }

    data = json.dumps(payload).encode('ascii')
    token = querydb.generateToken(data)  # stores the token

    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0',
               'Content-Type': 'application/json',
               'Authorization': 'Bearer ' + token}

    req = requests.post(url=url, data=data, headers=headers)
    print(req.text)
    body = req.__dict__
    requrl = json.loads(body.get('_content', {})).get('urls', {})[0].get('url')
    print(requrl)
    #print(querydb.generateUrl())

    return redirect(requrl, code=302)

# End Gabe


# Start Brody's code

@app.route('/childform')
@roles_required('user')
def childform():
    return render_template('childform.html')


@app.route('/childform', methods=['POST'])
@roles_required('user')
def addChild():
    born = datetime.datetime.strptime(request.form.get('dateofbirth'), "%Y-%m-%d")
    today = datetime.date.today()
    age = today.year - born.year - ((today.month, today.day) < (born.month, born.day))
    if age < 0:
        flash('Error with childs age', 'error')
        return parent()
    if age > 100:
        flash('Error with childs age', 'error')
        return parent()

    querydb.addChild(current_user.id, request.form.get('firstname'), request.form.get('lastname'),
                     request.form.get('dateofbirth'))
    return parent()


@app.route('/post_add_questionAnswers', methods=['GET', 'POST'])
def savePaginateAnswers():
    questionAnswerList = request.form.getlist('fname')
    questionIdList = request.form.getlist('qField')
    childId = request.form.get('cField')

    # Brody says: q = answer, q2 = questionId
    for (q, q2) in zip(questionAnswerList, questionIdList):
        # lack of this if was causing false "completed" question forms
        if q is not '':
            querydb.addQuestionAnswers(q, current_user.id, q2, childId)


@app.route('/staffconsultations', methods=['GET', 'POST'])
@roles_required('staff')
def approvePayments():
    consultations = querydb.getUnpaidConsultations()
    children = []
    times = []
    for c in consultations:
        print("Consultation ID: ", c.cnslt_id)
        children.append(querydb.getChildNameFromID(c.child))
        times.append(querydb.getConsultationTime(c.cnslt_id))
    return render_template('staffconsultations.html', children=children, consultations=consultations, times=times)


@app.route('/staff_ApprovedConsultations', methods=['GET', 'POST'])
@roles_required('staff')
def viewApprovedConsultations():
    consultations = querydb.getPaidConsultations()
    children = []
    times = []
    for c in consultations:
        print("Consultation ID: ", c.cnslt_id)
        children.append(querydb.getChildNameFromID(c.child))
        times.append(querydb.getConsultationTime(c.cnslt_id))
    return render_template('staff_ApprovedConsultations.html', children=children, consultations=consultations, times=times)


@app.route('/staffconsultations/approvals', methods=['GET', 'POST'])
def getPaymentChanges():
    consultations = request.form.getlist('consult_id')
    for c in consultations:
        print(c)
        try:
            b = request.form.get(str(c))
            if b == 'on':
                print("Marking paid: ", c)
                email = querydb.markConsultApproved(c)
                if email is not None:
                    emails.send_email(email[0].email, render_template('flask_user/emails/payment_confirm_subject.txt'),
                                      render_template('flask_user/emails/payment_confirm_message.html', user=email[0], child_name=email[1], appt_st_tm=email[4], appt_len=email[2], skype_link=email[3], app_name=current_app.user_manager.app_name),
                                      render_template('flask_user/emails/payment_confirm_message.txt', user=email[0], child_name=email[1], appt_st_tm=email[4], appt_len=email[2], skype_link=email[3], app_name=current_app.user_manager.app_name))
        except Exception as e:
            print("email exception : " + str(e))
            print('Check box was off')
    return redirect(url_for('approvePayments'))


# End Brody


# Start Jason's code

# Forms
class RoleChangeForm(FlaskForm):
    role = SelectField('Role', coerce=str, validators=[DataRequired()], option_widget='Select')
    submit = SubmitField('Submit')


class EditClientForm(FlaskForm):
    role = SelectField('Role', coerce=str, validators=[DataRequired()], option_widget='Select')
    firstName = StringField('firstName')
    lastName = StringField('lastName')


class QuestionEdit(FlaskForm):
    question = StringField('question')
    submit = SubmitField('Submit')


class ClientEditForm(FlaskForm):
    email = StringField('Email')
    fName = StringField('First Name')
    lName = StringField('Last Name')
    phone = StringField('Phone Number')
    address_1 = StringField('Address 1')
    address_2 = StringField('Address 2')
    city = StringField('City')
    province = StringField('Province')
    zip = StringField('Zip Code')
    role = SelectField('Role', coerce=str, validators=[DataRequired()], option_widget='Select')
    submit = SubmitField('Submit')


class SearchBar(FlaskForm):
    radio = RadioField('Items Per Page', choices=[('5', 5), ('10', 10), ('15', 15)], default='5')
    search = StringField('Search', render_kw={"placeholder": "Search"})
    submit = SubmitField('Submit')


class FeeAssign(FlaskForm):
    oneHourFee = StringField('1 Hour')
    onePointFiveFee = StringField('1.5 Hour')
    twoHourFee = StringField('2 Hour')
    submit = SubmitField('Submit')


# Routes
@app.route('/adminPortal')
@roles_required('admin')
def adminPortal():
    return render_template('admin/adminPortal.html')


@app.route('/feeAdjust', methods=['GET', 'POST'])
@roles_required('admin')
def feeAdjust():
    form = FeeAssign()
    if form.validate_on_submit():
        feeOne = form.oneHourFee.data
        feeOneFive = form.onePointFiveFee.data
        feeTwo = form.twoHourFee.data
        querydb.updateLengthFee(1,feeOne)
        querydb.updateLengthFee(2,feeOneFive)
        querydb.updateLengthFee(3,feeTwo)
        flash("Your changes have been saved")
        return redirect(url_for('adminPortal'))
    return render_template('admin/feeAdjust.html', form=form)


@app.route('/admin', methods=['GET', 'POST'])
@roles_required('admin')
def admin():
    page_num = 1
    items_per_page = 5
    if 'page_num' in request.args:
        page_num = int(request.args['page_num'])
    form = SearchBar()
    if form.validate_on_submit():
        items_per_page = form.radio.data
        form.radio.default = items_per_page
        users = querydb.getSearchedUsers(form.search.data, page_num, int(items_per_page))
        num_of_pages = math.ceil(querydb.getSearchedUserCount(form.search.data) / int(items_per_page))
    else:
        if 'items_per_page' in request.args:
            items_per_page = request.args['items_per_page']
        form.radio.default = items_per_page
        users = querydb.getAllUsers(page_num, int(items_per_page))
        num_of_pages = math.ceil(querydb.getUserCount() / int(items_per_page))
    roles = list()
    usersandroles = dict()
    for u in users:
        r = querydb.role(u.user_id)
        roles.append(r)
        if r == 'admin':
            usersandroles[u.email] = 'Admin'
        if r == 'user':
            usersandroles[u.email] = 'User'
        if r == 'psyc':
            usersandroles[u.email] = 'Psychologist'
        if r == 'staff':
            usersandroles[u.email] = 'Office Staff'
        form.process()
    return render_template('admin/admin.html', users=users, roles=roles, usersandroles=usersandroles, form=form
                           , page_num=page_num, num_of_pages=num_of_pages, items_per_page=items_per_page)


@app.route('/edit', methods=['GET', 'POST'])
@roles_required('admin')
def edit():
    isUserOrPsyc = False
    u_id = request.args.get('u_id')
    if int(u_id) == int(current_user.id):
        return redirect(url_for('admin'))
    current_role = querydb.role(u_id)
    c_id = querydb.contactID(u_id)
    if current_role == 'user' or current_role == 'psyc':
        form = ClientEditForm()
        form.email.default = querydb.getEmail(u_id)
        form.fName.default = querydb.getfName(u_id)
        form.lName.default = querydb.getlName(u_id)
        form.phone.default = querydb.getPhone(c_id)
        form.address_1.default = querydb.getAdd1(c_id)
        form.address_2.default = querydb.getAdd2(c_id)
        form.city.default = querydb.getCity(c_id)
        form.province.default = querydb.getProvince(c_id)
        form.zip.default = querydb.getZip(c_id)
        isUserOrPsyc = True
    else:
        form = RoleChangeForm()
    roles = querydb.getAllRoles()
    current_role = querydb.role(u_id)
    rolenames = [current_role]
    roleplusbigbois = dict()
    for a in roles:
        if a.role_nm != current_role:
            rolenames.append(a.role_nm)
    for name in rolenames:
        if name == 'user':
            roleplusbigbois['user'] = 'User'
        elif name == 'psyc':
            roleplusbigbois['psyc'] = 'Psychologist'
        elif name == 'admin':
            roleplusbigbois['Admin'] = 'Admin'
        elif name == 'staff':
            roleplusbigbois['staff'] = 'Office Staff'
    form.role.choices = [(r, roleplusbigbois[r]) for r in roleplusbigbois]
    if form.validate_on_submit():
        newRole = form.role.data
        if newRole == 'psyc':
            querydb.addPsychologistIfNotExist(u_id)
        querydb.updateUserRole(u_id, newRole)
        if isUserOrPsyc:
            querydb.updateEmail(u_id, form.email.data)
            querydb.updateName(u_id, form.fName.data, form.lName.data)
            querydb.updateContact(u_id, c_id, form.phone.data, form.address_1.data, form.address_2.data,
                                  form.city.data, form.province.data, form.zip.data)
        flash('Your changes have been saved.')
        return redirect(url_for('admin'))
    else:
        form.process()
    return render_template('admin/edit.html', title='Edit Profile', form=form, isUserOrPsyc=isUserOrPsyc)


@app.route('/delete')
@roles_required('admin')
def delete():
    user_id = request.args.get('u_id')
    if int(user_id) == int(current_user.id):
        return redirect(url_for('admin'))
    querydb.softDeleteUser(user_id)
    return redirect(url_for('admin'))


# End Jason's code

# Begin Charlie's code

@app.template_global()
def display_datetime(dt):
    wib = pytz.timezone('Asia/Jakarta')
    pytz.utc.localize(dt).astimezone(wib)
    return babel.dates.format_datetime(dt, format='EEEE, d MMMM yyyy hh:mm a (z)', tzinfo=wib, locale='id_ID')

@app.template_global()
def indonesian_locale():
    return babel.Locale('id', 'ID')

@app.route('/api/calendar')
@app.route('/api/calendar/psyc/<int:psyc_id>')
def api_calendar(psyc_id='all'):
    slots = querydb.getAllSlotsThatCanBeBooked(psyc_id)
    for s in slots:
        # Adjust month number for javascript
        s['st']['month'] -= 1
        s['end']['month'] -= 1
    return jsonify(slots)


@app.route('/api/availabilities')
@roles_required('psyc')
def api_availabilities():
    psyc_id = querydb.getPsycId(current_user.id)
    avails = querydb.getAvailabilities(psyc_id)
    return jsonify(avails)

@app.route('/api/blog/<psyc_id>')
def api_blog(psyc_id):
    page_num = int(request.args['page_num'])
    page_size = int(request.args['page_size'])
    return jsonify(querydb.apiBlog(psyc_id, page_num, page_size))
    
@app.route('/api/admin/search_users')
def api_admin_search_users():
    page_num = int(request.args['page_num'])
    page_size = int(request.args['page_size'])
    
    total = 0
    users = None
    if 'q' in request.args:
        total, users = querydb.getSearchedUsers(request.args['q'], page_num, page_size, return_total=True)
    else:
        total, users = querydb.getAllUsers(page_num, page_size, return_total=True)
    
    return jsonify({
        'total': total,
        'users': [{
            'id': u.user_id,
            'email': u.email,
            'role': querydb.role(u.user_id)
        } for u in users]
    })

@app.route('/my_psikolog_page')
@roles_required('psyc')
def my_psikolog_page():
    psyc_id = querydb.getPsycId(current_user.id)
    return redirect(url_for('psikolog', id=psyc_id))
@app.route('/psikolog_reviews/')
def psikolog_reviews():
    psyc_id = request.args.get('psyc_id')
    psyc_name = request.args.get('psyc_name')
    return render_template("psikolog/psikolog_reviews.html", psyc_id=psyc_id, psyc_name=psyc_name)


@app.route('/schedule')
@roles_required('user')
def schedule():  # TODO make sure only child of that parent can get here
    child_id = request.args.get('child_id')
    return render_template('schedule.html',
                           psyc_names=querydb.getPsychologistNames(),
                           len_fee=querydb.get_len_fee(), child_id=child_id)

@app.route('/api/appointments')
@roles_required('psyc')
def api_appointments():
    psyc_id = querydb.getPsycId(current_user.id)
    
    page_num = int(request.args['page_num'])
    page_size = int(request.args['page_size'])
    
    return jsonify(querydb.apiAppointments(psyc_id, page_num, page_size))

@app.route('/psikolog/appointments')
@roles_required('psyc')
def psikolog_appointments():
    return render_template('psikolog/appointments.html')

@app.route('/psikolog/')
@app.route('/psikolog/<int:id>')
def psikolog(id=None):
    if id is not None:
        psyc_info = querydb.lookupPsychologist(id)
        if psyc_info is not None:
            # Got their info.
            # Now fetch their blog posts.
            blg = querydb.getBlogPostsBy(id)
            blog_posts = [{
                'title': post.subject,
                'date_posted': post.updt_dtm,
                'contents': Markup(post.text)
            } for post in blg]

            can_edit = False
            if current_user.is_authenticated:
                logged_in_psyc = querydb.getUserPsycId(current_user.id)
                if logged_in_psyc == id:
                    can_edit = True

            # Fetch the psychologist's avatar
            avatar_url = querydb.getAvatar(id)

            return render_template('psikolog/psikolog_page.html', psyc_info=psyc_info, blog_posts=blog_posts,
                                   can_edit=can_edit, avatar_url=avatar_url)

    # Either no id was given or no psychologist was found.
    # In both cases, show a list of psychologists.
    return render_template('list_psikolog.html', psychologist_links=querydb.psychologistLinks())

@app.route('/psikolog/dashboard')
@roles_required('psyc')
def psikolog_dashboard():
    psyc_id = querydb.getPsycId(current_user.id)
    psyc_info = querydb.lookupPsychologist(psyc_id)
    avatar_url = querydb.getAvatar(psyc_id)
    return render_template('psikolog/dashboard.html', psyc_info=psyc_info, avatar_url=avatar_url)

@app.route('/psikolog/<int:psyc_id>/<int:year>/<int:month>/<int:day>')
def view_day(psyc_id, year, month, day):
    psyc = querydb.lookupPsychologist(psyc_id)
    avails = querydb.getAvailabilitiesForDay(psyc_id, year, month, day)
    return render_template('view_day.html', psyc=psyc, year=year, month=month, day=day, avails=avails)


@app.route('/psikolog/write_blog_post', methods=['GET', 'POST'])
@roles_required('psyc')
def write_blog_post():
    if request.method == 'GET':
        return render_template('write_blog_post.html')
    elif request.method == 'POST':
        subject = request.form['subject']
        text = request.form['text']
        psyc_id = querydb.getPsycId(current_user.id)
        querydb.createBlogPost(current_user.id, psyc_id, subject, text)
        flash('Your blog post has been published.')
        return redirect(url_for('psikolog_dashboard'))


@app.route('/submit_review', methods=['GET', 'POST'])
def write_review():
    if request.method == 'GET':
        return render_template('reviews.html')
    elif request.method == 'POST':
        reviewAmount = request.form['reviewAmount']
        text = request.form['text']
        user_id = current_user.id
        consult_id= "1" #purely for testing
        print(text)
        print(user_id)
        print(reviewAmount)
        approved = "n"
        querydb.createReview(user_id, consult_id, reviewAmount, text, approved)
        #querydb.createBlogPost(current_user.id, psyc_id, subject, text)
        flash('Your review has been published.')
        return redirect(url_for('index'))

@app.route('/psikolog/delete_blog_post/<int:blog_id>')
@roles_required('psyc')
def delete_blog_post(blog_id):
    psyc_id = querydb.getPsycId(current_user.id)
    querydb.deleteBlogPost(blog_id, psyc_id)
    flash('Blog post successfully deleted.')
    return redirect(url_for('psikolog_dashboard'))

@app.route('/psikolog/change_avatar', methods=['GET', 'POST'])
@roles_required('psyc')
def change_avatar():
    if request.method == 'GET':
        return render_template('change_avatar.html', psyc_id=querydb.getPsycId(current_user.id))
    elif request.method == 'POST':
        psyc_id = querydb.getPsycId(current_user.id)
        querydb.updateAvatar(psyc_id, request.files['avatar'])
        flash('Avatar updated.')
        return redirect(url_for('psikolog_dashboard'))


@app.route('/psikolog/edit_qualifications', methods=['GET', 'POST'])
@roles_required('psyc')
def edit_qualifications():
    if request.method == 'GET':
        return render_template('edit_qualifications.html', psyc_id=querydb.getPsycId(current_user.id))
    elif request.method == 'POST':
        psyc_id = querydb.getPsycId(current_user.id)
        querydb.updateQualifications(psyc_id, request.form['qualifications'])
        flash('Qualifications updated.')
        return redirect(url_for('psikolog_dashboard'))


@app.route('/psikolog/edit_availability_list')
@app.route('/psikolog/edit_availability_list/<int:page>')
@roles_required('psyc')
def edit_availability_list(page=1):
    if page < 1:
        page = 1

    psyc_id = querydb.getPsycId(current_user.id)
    avail_list = querydb.getAvailabilities(psyc_id, page=page)
    weekdays = querydb.getWeekDayList()

    return render_template('edit_availability_list.html', psyc_id=psyc_id, avails=avail_list, weekdays=weekdays,
                           page=page)

@app.route('/psikolog/add_vacation', methods=['GET', 'POST'])
@roles_required('psyc')
def add_vacation():
    if request.method == 'GET':
        return render_template('add_vacation.html', current_year=datetime.datetime.now().year)
    elif request.method == 'POST':
        psyc_id = querydb.getPsycId(current_user.id)
        
        vac_st_day = int(request.form['vac_st_day'], 10)
        vac_st_month = int(request.form['vac_st_month'], 10)
        vac_st_year = int(request.form['vac_st_year'], 10)
        vac_st_hour, vac_st_minute = request.form['vac_st_time'].split(':')
        vac_st_hour = int(vac_st_hour, 10)
        vac_st_minute = int(vac_st_minute, 10)
        vac_st = pytz.timezone('Asia/Jakarta').localize(datetime.datetime(vac_st_year,
                                                                          vac_st_month,
                                                                          vac_st_day,
                                                                          vac_st_hour,
                                                                          vac_st_minute))
        vac_st = vac_st.astimezone(pytz.utc)
        
        vac_end_day = int(request.form['vac_end_day'], 10)
        vac_end_month = int(request.form['vac_end_month'], 10)
        vac_end_year = int(request.form['vac_end_year'], 10)
        vac_end_hour, vac_end_minute = request.form['vac_end_time'].split(':')
        vac_end_hour = int(vac_end_hour, 10)
        vac_end_minute = int(vac_end_minute, 10)
        vac_end = pytz.timezone('Asia/Jakarta').localize(datetime.datetime(vac_end_year,
                                                                           vac_end_month,
                                                                           vac_end_day,
                                                                           vac_end_hour,
                                                                           vac_end_minute))
        vac_end = vac_end.astimezone(pytz.utc)

        if vac_st > vac_end:
            temp = vac_end
            vac_end = vac_st
            vac_st = temp
            
        querydb.addVacation(psyc_id, vac_st, vac_end, False)

        flash('Your vacation has been added to the system.')

        return redirect(url_for('edit_vacation_list'))

@app.route('/psikolog/edit_vacation/<int:vac_id>', methods=['GET', 'POST'])
@roles_required('psyc')
def edit_vacation(vac_id):
    wib = pytz.timezone('Asia/Jakarta')
    
    if request.method == 'GET':
        psyc_id = querydb.getPsycId(current_user.id)
        
        vac = querydb.getVacation(psyc_id, vac_id)
        
        # Convert times to WIB timezone
        vac = {
            'vac_id': vac.vac_id,
            'vac_st': pytz.utc.localize(vac.vac_st).astimezone(wib),
            'vac_end': pytz.utc.localize(vac.vac_end).astimezone(wib)
        }
        
        return render_template('edit_vacation.html',
                               vac=vac,
                               current_year=datetime.datetime.now().year)
    elif request.method == 'POST':
        psyc_id = querydb.getPsycId(current_user.id)
        
        vac_st_day = int(request.form['vac_st_day'], 10)
        vac_st_month = int(request.form['vac_st_month'], 10)
        vac_st_year = int(request.form['vac_st_year'], 10)
        vac_st_hour, vac_st_minute = request.form['vac_st_time'].split(':')
        vac_st_hour = int(vac_st_hour, 10)
        vac_st_minute = int(vac_st_minute, 10)
        vac_st = wib.localize(datetime.datetime(vac_st_year,
                                                vac_st_month,
                                                vac_st_day,
                                                vac_st_hour,
                                                vac_st_minute))
        vac_st = vac_st.astimezone(pytz.utc)
        
        vac_end_day = int(request.form['vac_end_day'], 10)
        vac_end_month = int(request.form['vac_end_month'], 10)
        vac_end_year = int(request.form['vac_end_year'], 10)
        vac_end_hour, vac_end_minute = request.form['vac_end_time'].split(':')
        vac_end_hour = int(vac_end_hour, 10)
        vac_end_minute = int(vac_end_minute, 10)
        vac_end = wib.localize(datetime.datetime(vac_end_year,
                                                 vac_end_month,
                                                 vac_end_day,
                                                 vac_end_hour,
                                                 vac_end_minute))
        vac_end = vac_end.astimezone(pytz.utc)

        if vac_st > vac_end:
            temp = vac_end
            vac_end = vac_st
            vac_st = temp

        querydb.updateVacation(psyc_id, vac_id, vac_st, vac_end, False)

        flash('Your vacation has been updated.')

        return redirect(url_for('edit_vacation_list'))

@app.route('/psikolog/delete_vacation/<int:vac_id>')
@roles_required('psyc')
def delete_vacation(vac_id):
    psyc_id = querydb.getPsycId(current_user.id)
    querydb.deleteVacation(psyc_id, vac_id)
    flash('Vacation deleted.')
    return redirect(url_for('edit_vacation_list'))

@app.route('/psikolog/edit_vacation_list')
@app.route('/psikolog/edit_vacation_list/<int:page>')
@roles_required('psyc')
def edit_vacation_list(page=1):
    if page < 1:
        page = 1
    
    psyc_id = querydb.getPsycId(current_user.id)
    vac_list = querydb.getVacations(psyc_id, page=page)
    
    return render_template('edit_vacation_list.html', page=page, vac_list=vac_list)

@app.route('/psikolog/delete_availability/<int:avail_id>')
@roles_required('psyc')
def delete_availability(avail_id):
    psyc_id = querydb.getPsycId(current_user.id)
    querydb.deleteAvailability(avail_id, psyc_id)
    flash('Availability time has been deleted.')
    return redirect(url_for('edit_availability_list'))


@app.route('/psikolog/add_availability', methods=['GET', 'POST'])
@roles_required('psyc')
def add_availability():
    if request.method == 'GET':
        weekdays = querydb.getWeekDays()
        return render_template('add_availability.html', weekdays=weekdays)
    elif request.method == 'POST':
        psyc_id = querydb.getPsycId(current_user.id)
        time_st = request.form['time_st']
        time_end = request.form['time_end']
        weekday = request.form['weekday']

        querydb.addAvailability(psyc_id, time_st, time_end, weekday)

        flash('Your new availability time has been created.')

        return redirect(url_for('edit_availability_list'))

@app.route('/psikolog/edit_blog_post/<int:blog_id>', methods=['GET', 'POST'])
@roles_required('psyc')
def edit_blog_post(blog_id):
    psyc_id = querydb.getPsycId(current_user.id)
    
    if request.method == 'GET':
        post = querydb.getBlogPost(blog_id)
        if post.psyc.psyc_id != psyc_id:
            flash('You do not own that blog post.', 'error')
            return redirect(url_for('psikolog_dashboard'))
        
        return render_template('psikolog/edit_blog_post.html', post=post)
    else:
        subject = request.form['subject']
        text = request.form['text']
        
        querydb.updateBlogPost(blog_id, current_user.id, psyc_id, subject, text)
        flash('Successfully updated blog post.')
        return redirect(url_for('psikolog_dashboard'))

@app.route('/psikolog/edit_availability/<int:avail_id>', methods=['GET', 'POST'])
@roles_required('psyc')
def edit_availability(avail_id):
    psyc_id = querydb.getPsycId(current_user.id)
    if request.method == 'GET':
        avail = querydb.getAvailability(avail_id, psyc_id)
        weekdays = querydb.getWeekDays()
        return render_template('edit_availability.html', avail=avail, avail_id=avail_id, weekdays=weekdays)
    elif request.method == 'POST':
        time_st = request.form['time_st']
        time_end = request.form['time_end']
        weekday = request.form['weekday']

        if time_st < time_end:
            querydb.updateAvailability(avail_id, psyc_id, time_st, time_end, weekday)
            flash('Availability time has been updated.')
        else:
            flash('Failed to add availability time.  "Time Start" must be earlier than "Time End".', category='error')

        return redirect(url_for('edit_availability_list'))


# End Charlie's code

# Nolan's Code

@app.route('/staff')
@roles_required('staff')
def staff():
    return render_template('staff.html', children=querydb.getVerifiedChildren())


# End Nolan's Code


if __name__ == '__main__':
    app.run(debug=True)
